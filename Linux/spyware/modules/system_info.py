import platform
from dataclasses import dataclass
import os
import psutil
import socket
from partition import Partition

@dataclass
class SystemInfo:
    os: str = None
    os_version: str = None
    cpu_architecture: str = None
    cpu_physical_cores: str = None
    cpu_total_cores: str = None
    cpu_maximum_frequency: str = None
    total_ram: str = None
    available_ram: str = None
    disk_partitions: list[Partition] = None
    hostname: str = None
    ip_address: str = None

    def set_system_info(self) -> None:
        self._set_os()
        self._set_os_version()
        self._set_cpu_architecture()
        self._set_cpu_physical_cores()
        self._set_cpu_total_cores()
        self._set_cpu_maximum_frequency()
        self._set_total_ram()
        self._set_available_ram()
        self._set_host_name()
        self._set_ip_address()
        self._set_disk_info()

    def _set_os(self) -> None:
        self.os = platform.system()

    def _set_os_version(self) -> None:
        self.os_version = platform.release()

    def _set_cpu_architecture(self) -> None:
        self.cpu_architecture = platform.machine()

    def _set_cpu_physical_cores(self) -> None:
        self.cpu_physical_cores = psutil.cpu_count(logical=False)

    def _set_cpu_total_cores(self) -> None:
        self.cpu_total_cores = psutil.cpu_count(logical=True)

    def _set_cpu_maximum_frequency(self) -> None:
        self.cpu_maximum_frequency = psutil.cpu_freq().max

    def _set_total_ram(self) -> None:
        self.total_ram = psutil.virtual_memory().total

    def _set_available_ram(self) -> None:
        self.available_ram = psutil.virtual_memory().available

    def _set_host_name(self) -> None:
        self.hostname = socket.gethostname()

    def _set_ip_address(self) -> None:
        self.ip_address = socket.gethostbyname(socket.gethostname())

    def _set_disk_info(self) -> None:
        self.disk_partitions = []
        partitions = psutil.disk_partitions()
        for x in partitions:
            partition = Partition.from_device(x.mountpoint)
            self.disk_partitions.append(partition)

    def __str__(self):
        partitions_str = "\n".join(str(partition) for partition in self.disk_partitions)
        return (f"Operating System: {self.os} {self.os_version}\n"
                f"CPU Architecture: {self.cpu_architecture}\n"
                f"CPU Cores: {self.cpu_physical_cores} physical, {self.cpu_total_cores} total\n"
                f"CPU Max Frequency: {self.cpu_maximum_frequency} MHz\n"
                f"Total RAM: {self.total_ram / (1024**3):.2f} GB\n"
                f"Available RAM: {self.available_ram / (1024**3):.2f} GB\n"
                f"Hostname: {self.hostname}\n"
                f"IP Address: {self.ip_address}\n"
                f"Disk Partitions:\n{partitions_str}")

         

if __name__ == "__main__":
    si = SystemInfo()  # Create an instance of SystemInfo
    si.set_system_info()
    print(si)